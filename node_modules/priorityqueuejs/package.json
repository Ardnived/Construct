{
  "name": "priorityqueuejs",
  "version": "0.2.0",
  "description": "a simple priority queue data structure",
  "author": {
    "name": "Jano GonzÃ¡lez",
    "email": "info@janogonzalez.com"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*"
  },
  "readmeFilename": "Readme.md",
  "main": "index.js",
  "dependencies": {},
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/janogonzalez/priorityqueuejs.git"
  },
  "keywords": [
    "heap",
    "priority",
    "queue",
    "priority queue",
    "data structure"
  ],
  "license": "MIT",
  "readme": "# priorityqueue.js\n\nA simple priority queue data structure for Node.js and the browser.\n\n## Installation\n\nAs component for the browser:\n\n```\n$ component install janogonzalez/priorityqueuejs\n```\n\nAs npm for Node.js:\n\n```\n$ npm install priorityqueuejs\n```\n\n## Example\n\n```js\nvar PriorityQueue = require('priorityqueuejs');\n\nvar queue = new PriorityQueue(function(a, b) {\n  return a.cash - b.cash;\n});\n\nqueue.enq({ cash: 250, name: 'Valentina' });\nqueue.enq({ cash: 300, name: 'Jano' });\nqueue.enq({ cash: 150, name: 'Fran' );\nqueue.size(); // 3\nqueue.peek(); // { cash: 300, name: 'Jano' }\nqueue.deq(); // { cash: 300, name: 'Jano' }\nqueue.size(); // 2\n```\n\n## API\n\n### PriorityQueue()\n\nInitializes a new empty `PriorityQueue` wich uses `.DEFAULT_COMPARATOR()` as\nthe comparator function for its elements.\n\n### PriorityQueue(comparator)\n\nInitializes a new empty `PriorityQueue` with uses the given `comparator(a, b)`\nfunction as the comparator for its elements.\n\nThe comparator function must return a positive number when `a > b`, 0 when\n`a == b` and a negative number when `a < b`.\n\n### PriorityQueue.DEFAULT_COMPARATOR(a, b)\n\nCompares two `Number` or `String` objects.\n\n### PriorityQueue#deq()\n\nDequeues the top element of the priority queue.\nThrows an `Error` when the queue is empty.\n\n### PriorityQueue#enq(element)\n\nEnqueues the `element` at the priority queue and returns its new size.\n\n### PriorityQueue#forEach(fn)\n\nExecutes `fn` on each element. Just be careful to not modify the priorities,\nsince the queue won't reorder itself.\n\n### PriorityQueue#isEmpty()\n\nReturns whether the priority queue is empty or not.\n\n### PriorityQueue#peek()\n\nPeeks at the top element of the priority queue.\nThrows an `Error` when the queue is empty.\n\n### PriorityQueue#size()\n\nReturns the size of the priority queue.\n\n## Testing\n\nAs component in the browser, open test/test.html in your browser:\n\n```\n$ make\n$ open test/test.html\n```\n\nAs npm package:\n\n```\n$ npm test\n```\n\n## Licence\n\nMIT\n",
  "bugs": {
    "url": "https://github.com/janogonzalez/priorityqueuejs/issues"
  },
  "homepage": "https://github.com/janogonzalez/priorityqueuejs",
  "_id": "priorityqueuejs@0.2.0",
  "dist": {
    "shasum": "9075c5ed1b93de50800b1820a6337e52904a7b01"
  },
  "_from": "priorityqueuejs@",
  "_resolved": "https://registry.npmjs.org/priorityqueuejs/-/priorityqueuejs-0.2.0.tgz"
}
